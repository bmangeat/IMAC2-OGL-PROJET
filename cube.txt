#include "../include/cube.hpp"

    Cube::Cube(glimac::FilePath applicationPath) {

        //Set vertices coordinates
        this->vertices = { 
            glm::vec3(-0.5f,0.5f,-0.5f),
            glm::vec3(0.5f,0.5f,-0.5f),
            glm::vec3(-0.5f,0.5f,0.5f),
            glm::vec3(0.5f,0.5f,0.5f),

            glm::vec3(-0.5f,-0.5f,-0.5f),
            glm::vec3(0.5f,-0.5f,-0.5f),
            glm::vec3(-0.5f,-0.5f,0.5f),
            glm::vec3(0.5f,-0.5f,0.5f)
        };

        //definition of shaders
        glimac::Program program = loadProgram(applicationPath.dirPath() + "../assets/shaders/cubeShader/3D.vs.glsl",
                                        applicationPath.dirPath() + "../assets/shaders/cubeShader/text3D.fs.glsl");
        program.use();

        //this->vbo creation
        glGenBuffers(1, this->vbo);

        //Binding this->vbo
        glBindBuffer(GL_ARRAY_BUFFER,this->vbo);

        glBufferData(GL_ARRAY_BUFFER, (this->vertices.size()+1) * sizeof(glm::vec3), this->vertices.data(), GL_STATIC_DRAW);

        //dÃ©binder
        glBindBuffer(GL_ARRAY_BUFFER,0);

        //IBO Creation
        glGenBuffers(1,this->ibo);

        //biding ibo
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

        //Tableau d'indices
        std::vector<uint32_t> index = {
            0,1,2,
            1,2,3,
            0,2,6,
            4,0,6,
            0,4,5,
            1,4,5,
            1,3,5,
            3,5,7,
            2,3,6,
            3,6,7,
            4,5,6,
            5,6,7
        };

        //put index in IBO
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, index.size() * sizeof(uint32_t), index.data(), GL_STATIC_DRAW);

        //Debinding ibo
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);

        //this->vao creation
        GLuint this->vao;
        glGenVertexArrays(1,this->vao);

        //Binding this->vao
        glBindVertexArray(this->vao);

        //Save IBO in vao
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ibo);

        //attributs activation
        const GLuint VERTEX_ATTR_POSITION = 0;
        glEnableVertexAttribArray(VERTEX_ATTR_POSITION);

        const GLuint VERTEX_ATTR_NORMAL = 1;
        glEnableVertexAttribArray(VERTEX_ATTR_NORMAL);

        const GLuint VERTEX_ATTR_TEXTURE = 2;
        glEnableVertexAttribArray(VERTEX_ATTR_TEXTURE);

        //rebinder le this->vbo
        glBindBuffer(GL_ARRAY_BUFFER,this->vbo);

        glVertexAttribPointer(VERTEX_ATTR_POSITION, 3, GL_FLOAT, GL_FALSE, sizeof(glm::vec3), (const GLvoid*) offsetof(glm::vec3, position));
        glVertexAttribPointer(VERTEX_ATTR_NORMAL, 3, GL_FLOAT, GL_FALSE, sizeof(glm::vec3), (const GLvoid*) offsetof(glm::vec3, normal));
        glVertexAttribPointer(VERTEX_ATTR_TEXTURE, 2, GL_FLOAT, GL_FALSE, sizeof(glm::vec3), (const GLvoid*) offsetof(glm::vec3, texCoords));

        glBindBuffer(GL_ARRAY_BUFFER,0);

        //debinder this->vao
        glBindVertexArray(0);

    };
       
    void Cube::drawCube() {
        //rebinder vao
        glBindVertexArray(vao);
        glDrawElements(GL_TRIANGLES, 8*3, GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);
    };

    GLuint Cube::getVao() {
        return this->vao;
    };

    GLuint Cube::getVbo() {
        return this->vao;
    };

    Cube::~Cube();